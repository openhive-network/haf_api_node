services:
  caddy:
    image: ${CADDY_IMAGE:-registry.gitlab.syncad.com/hive/haf_api_node/caddy}:${CADDY_VERSION:-latest}
    profiles:
      - admin
      - servers
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    environment:
      PUBLIC_HOSTNAME: ${PUBLIC_HOSTNAME}
      JSONRPC_API_SERVER_NAME: ${JSONRPC_API_SERVER_NAME:-jussi}
      ADMIN_ENDPOINT_PROTOCOL: ${ADMIN_ENDPOINT_PROTOCOL:-https}
    volumes:
      - type: bind
        source: ./caddy/Caddyfile
        target: /etc/caddy/Caddyfile
        read_only: true
      - type: bind
        source: ./caddy/snippets
        target: /etc/caddy/snippets
        read_only: true
      - type: bind
        source: ./caddy/admin_html
        target: /etc/caddy/admin_html
        read_only: true
      - type: bind
        source: ${HAF_DATA_DIRECTORY}/logs/pgbadger
        target: /etc/caddy/pgbadger
        read_only: true
      - type: bind
        source: ${HAF_DATA_DIRECTORY}/logs/caddy
        target: /var/log/caddy
        read_only: false
      - type: bind
        source: ${TLS_SELF_SIGNED_SNIPPET}
        target: /etc/caddy/tls-self-signed-snippets/self-signed.snippet
        read_only: true
      - type: volume
        source: caddy_data
        target: /data
      - type: volume
        source: caddy_config
        target: /config
    healthcheck:
      test: ["CMD-SHELL", "wget -T2 -nv -t1 --spider http://localhost:2019/reverse_proxy/upstreams || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 1m
    networks:
      - haf-network
  version-display:
    image: ${VERSION_DISPLAY_IMAGE:-registry.gitlab.syncad.com/hive/haf_api_node/version-display}:${VERSION_DISPLAY_VERSION:-latest}
    profiles:
      - admin
      - servers
    environment:
      PROJECT: ${COMPOSE_PROJECT_NAME}
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    networks:
      - haf-network

volumes:
  # this volume stores your SSL certificates, every time you destroy this volume,
  # caddy will obtain a new certificate at startup, and this can quickly cause
  # you to hit letsencrypt rate limts.
  caddy_data:
  caddy_config:
